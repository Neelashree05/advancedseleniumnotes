TestNG:
Unit testing framework which supports java and .net
TestNG = Junit + Nunit

TestNG for developers:
-> Developers will make use of TESTNG for Unit testing of the source code

TestNG for Automation Testers:
-> Automation Testers will make use of TESTNG for developing the test scripts
   in a more optimised way.

Annotations in TestNG:
-> @Test
-> @BeforeMethod
-> @AfterMethod
-> @BeforeClass
-> @AfterClass
-> @BeforeTest
-> @AfterTest
-> @BeforeSuite
-> @AFterSuite
-> @DataProvider
-> @Listeners
-> @Parameters

@Test Annotation:
-> Will drive the test script execution hence the framework is called TDD- test driven development
-> All annotation method should have access specifier as public and return type as void
-> @Test annotation acts like a main method which is identified by JVM to start the execution
-> One class can consists of multiple @Test annotations
-> Test class name and Test method name should end with TEST
-> Test class name is usually module name
-> Test method name is usually test case name with ID
-> In a Test Class all the @Test will be execute in default execxution order - 
-> default execution order of @Test is alphabetical/ ASCII value

=> To change the execution order of @Test annotations inside a test class: priority in testNg
@Test(priority = int)
-> Lowest priority will execute first
-> Default priority will be 0
-> Negetive priorities are allowed
-------------------------------------------------------------------------------------------------------------------

public class Sample {

	@Test(priority = 0)
	public void createContact()
	{

	System.out.println("contact created");

	}
    @Test(priority = -1)
	public void modifyContact()
	{
		System.out.println("modify contact");
	}
	
	@Test(priority = 1)
	public void deleteContact()
	{
		System.out.println("delete contact");
	}
}
modify contact
contact created
delete contact
PASSED: createContact
PASSED: modifyContact
PASSED: deleteContact

===============================================
    Default test
    Tests run: 3, Failures: 0, Skips: 0
===============================================


===============================================
Default suite
Total tests run: 3, Passes: 3, Failures: 0, Skips: 0
===============================================
--------------------------------------------------------------------------------------------------------------------------------------------

=> To run the same test script/ @Test mutiple Times:invocation count in TestNG
@Test(invocationCount = int)
-> Default invocation count is 1
-> If we want to run the same test script more than once then provide invocation count
-> If invocation count is given 0 or negetive values, Then that @Test will not be executed

we can give both invocation count and priority for the same test script
@Test(invocationCount = 4, priority = 2) - priority is given first preference
---------------------------------------------------------------------------------------------------------------------------------------
public class Sample {

	@Test
	public void createContact()
	{

	System.out.println("contact created");

	}
    @Test
	public void modifyContact()
	{
		System.out.println("modify contact");
	}
	
	@Test(invocationCount = 2)
	public void deleteContact()
	{
		System.out.println("delete contact");
	}
}

contact created
delete contact
delete contact
modify contact
PASSED: deleteContact
PASSED: createContact
PASSED: deleteContact
PASSED: modifyContact

===============================================
    Default test
    Tests run: 3, Failures: 0, Skips: 0
===============================================


===============================================
Default suite
Total tests run: 4, Passes: 4, Failures: 0, Skips: 0
===============================================
----------------------------------------------------------------------------------------------------------------------------------------------



=> To make the execution of one test script depend on the status(pass/fail) of other test sript
   - DependsOnMethods in TestNG
     @Test(dependsOnMethods = "method name")
   - if one test script should depend on execution status of multiple test scripts like
     @Test(dependsOnMethods = {"method name 1","method name 2"})

public class Sample {

	@Test
	public void createContact()
	{

	System.out.println("contact created");

	}

	@Test(dependsOnMethods = "createContact")
	public void modifyContact()
	{
		System.out.println("modify contact");
	}
	
	@Test(dependsOnMethods = "createContact")
	public void deleteContact()
	{
		System.out.println("delete contact");
	}
}
[RemoteTestNG] detected TestNG version 7.4.0
contact created
delete contact
modify contact
PASSED: modifyContact
PASSED: createContact
PASSED: deleteContact

===============================================
    Default test
    Tests run: 3, Failures: 0, Skips: 0
===============================================


===============================================
Default suite
Total tests run: 3, Passes: 3, Failures: 0, Skips: 0
===============================================
-------------------------------------------------------------------------------------------------------------------------

public class Sample {

	@Test
	public void createContact()
	{
		int []arr= {1,2,3};
		System.out.println(arr[5]);
	System.out.println("contact created");

	}

	@Test(dependsOnMethods = "createContact")
	public void modifyContact()
	{
		System.out.println("modify contact");
	}
	
	@Test(dependsOnMethods = "createContact")
	public void deleteContact()
	{
		System.out.println("delete contact");
	}
}
===============================================
    Default test
    Tests run: 3, Failures: 1, Skips: 2
===============================================


===============================================
Default suite
Total tests run: 3, Passes: 0, Failures: 1, Skips: 2
===============================================
-------------------------------------------------------------------------------------------------------------------------


=> To disable a prticular test script/@Test : enabled in testNG
@Test(enabled = false)
-> Enabled is feature which accepts boolean(true/false)
-> Default value for enabled is true,
-> If you want to disable the test script execution give enabled = false.

=> To execute the same test script with different set of data : Dataprovider
-> when ever we have more amount of data to be added, and all the data correspond to
   same test case, then we prefer @DataProvider
-> @Dataprovider is the only annotation method whose return type is Object[][].
-> First we have create/read Data using @DataProvider and then we have to load the data into 
   the test script giving dataprovider as argument for @Test(dataprovider = "getData")

package testNg;

import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

public class DataProviderEx1 {

	@Test(dataProvider = "dataProvider_bookTickets")
	public void bookTicketTest(String src,String dest)
	{
		System.out.println("book Tickets from "+src+" to " +dest+"");
	}
	
	@DataProvider
	public Object[][] dataProvider_bookTickets()
	{
		Object[][] objArr = new Object[3][2];
		
		objArr[0][0]="Banglore";
		objArr[0][1]="Goa";
		
		objArr[1][0]="Banglore";
		objArr[1][1]="mysore";
		
		objArr[2][0]="Banglore";
		objArr[2][1]="pune";
		
		return objArr;
		
}
}
--------------------------------------------------------------------------------------------------------------------------------------------------
package testNg;

import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

public class DataProviderEx2 {

	@Test(dataProvider = "dataProvider_bookTickets")
	public void bookTicketTest(String src,String dest,int numOfPpl)
	{
		System.out.println("book Tickets from "+src+" to " +dest+" ,"+numOfPpl+"");
	}
	@DataProvider
	public Object[][] dataProvider_bookTickets()
	{
		Object[][] objArr = new Object[3][3];
		
		objArr[0][0]="Banglore";
		objArr[0][1]="Goa";
		objArr[0][2]=2;

		objArr[1][0]="Banglore";
		objArr[1][1]="mysore";
		objArr[1][2]=3;

		objArr[2][0]="Banglore";
		objArr[2][1]="Pune";
		objArr[2][2]=3;
        return objArr;
		
		
	}
}
----------------------------------------------------------------------------------------------------------------------------------------------
package testNg;

import java.util.Random;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

public class DataProviderEx3 {
	
@Test(dataProvider="getdata")
	public void data(String orgName, String phno, String email) throws Throwable
	{
		WebDriver driver=new ChromeDriver();
		driver.get("http://localhost:8888/");
		driver.findElement(By.name("user_name")).sendKeys("admin");
		driver.findElement(By.name("user_password")).sendKeys("admin");
	    driver.findElement(By.id("submitButton")).click();
	    driver.findElement(By.linkText("Organizations")).click();
	    driver.findElement(By.xpath("//img[@alt='Create Organization...']")).click();
	    driver.findElement(By.name("accountname")).sendKeys(orgName);
	    driver.findElement(By.id("phone")).sendKeys(phno);
	    driver.findElement(By.id("email1")).sendKeys(email);
	    driver.findElement(By.xpath("//input[@title='Save [Alt+S]']")).click();
	    Thread.sleep(2000);
	    driver.findElement(By.xpath("//img[@src=\"themes/softed/images/user.PNG\"]")).click();
	    driver.findElement(By.xpath("//a[text()='Sign Out']")).click();
	    Thread.sleep(1000);
	    driver.quit();
	}

@DataProvider
public Object[][] getdata()
{
	Object[][] objArr = new Object[3][3];
	Random ranNum = new Random();
	int ranNumber = ranNum.nextInt(1000);
	objArr[0][0]="AAA"+ranNumber;
	objArr[0][1]="6956451665";
	objArr[0][2]="abc@gmail.com";
	
	objArr[1][0]="BBB"+ranNumber;
	objArr[1][1]="6956451665";
	objArr[1][2]="abcd@gmail.com";
	
	objArr[2][0]="CCC"+ranNumber;
	objArr[2][1]="6956451665";
	objArr[2][2]="abce@gmail.com";
	
	return objArr;
	
}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------
public Object[][] readDataUsingDataProvider(String sheetName) throws Throwable
	{
		FileInputStream fis = new FileInputStream("./src/test/resources/ExcelSheet10am.xlsx");
		Workbook book = WorkbookFactory.create(fis);
		Sheet sheet = book.getSheet(sheetName);
		int lastRow = sheet.getLastRowNum()+1;
		int lastCell = sheet.getRow(0).getLastCellNum();
		
		Object[][] objArr = new Object[lastRow][lastCell];
		
		for (int i = 0; i <lastRow ; i++)
		{
			for (int j = 0; j < lastCell; j++) 
			{
				objArr[i][j]=sheet.getRow(i).getCell(j).toString();
			}
		}
		return objArr;
		
	}
************************************************************************************************************************
package testNg;

import java.util.Random;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import Generic_Utilities.Excel_Utility;

public class DataProviderEx4 {

	@Test(dataProvider="getdata")
	public void data(String orgName, String phno, String email) throws Throwable
	{
		WebDriver driver=new ChromeDriver();
		driver.get("http://localhost:8888/");
		driver.findElement(By.name("user_name")).sendKeys("admin");
		driver.findElement(By.name("user_password")).sendKeys("admin");
	    driver.findElement(By.id("submitButton")).click();
	    driver.findElement(By.linkText("Organizations")).click();
	    driver.findElement(By.xpath("//img[@alt='Create Organization...']")).click();
	    Random ranNum = new Random();
		int ranNumber = ranNum.nextInt(1000);
	    driver.findElement(By.name("accountname")).sendKeys(orgName+ranNumber);
	    driver.findElement(By.id("phone")).sendKeys(phno);
	    driver.findElement(By.id("email1")).sendKeys(email);
	    driver.findElement(By.xpath("//input[@title='Save [Alt+S]']")).click();
	    Thread.sleep(2000);
	    driver.findElement(By.xpath("//img[@src=\"themes/softed/images/user.PNG\"]")).click();
	    driver.findElement(By.xpath("//a[text()='Sign Out']")).click();
	    Thread.sleep(1000);
	    driver.quit();
	}
	
	@DataProvider
	public Object[][] getdata() throws Throwable
	{
	Excel_Utility elib = new Excel_Utility();	
	Object[][] values = elib.readDataUsingDataProvider("DataProvider");
	return values;
		
	}
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------

Annotations in TestNG 

=> Basic Configuration Annotations - ReturnType is void

@Test:--- act like a main method, which is identified by JVM to start the execution

@BeforeSuite: It is executed before the <suite> tag in the suite xml file
              It is executed only once per execution as there will be only one <suite>
              It is used for establishing database connection.

@AfterSuite: It is executed after the closing of suite tag </suite> in suite xml file
             It is executed only once per execution as there will be only one </suite>
             It is used for closing database connection.

@BeforeTest: It is executed before the opening of <Test> in suite xml file
             The number of times it will execute depends on number <Test> tags
             This is mostly used for parallel executions as it create multiple threads

@AfterTest: It is executed after the closing of test tag </Test> in suite xml file
            The number of times it will execute depends on number </Test> tags
            This is mostly used for parallel executions as it create multiple threads            

@BeforeClass: It will execute before opening of every class <class> in suite xml file
              or simply we can tell before evry test class
              The number of times it will execute depends on the number of <Class> or Test class
              It is used for launching browser              

@AfterClass: It will execute after closing of every class </Class> in suite xml file
             or simply we can tell after evry test class
             The number of times it will execute depends on the number of </Class> or Test class
             It is used for closing browser

@BeforeMethod: It will execute before every @Test annotation
               The number of times it will execute depends on number of @Test
               It is used for login to Application

@AfterMethod: It will execute after every @Test annotation
              The number od times it will execute depends on number of @Test
              It is used for logout of Application

BaseClass: It consists of all basic configuration annotations with specfic functionality
-> Base class is designed in Generic library Package of src/main/java
-> there will be only one base class for a project
-> All the test scripts should extend from base class to inherit the functionalities 
   written inside the base class
-> Automation rule says "all test script should extend from base class"
-> Base class will be usually designed by framework developer
-> Once after the generic Libraries are configured, Object repository 
   designed later base class is configured.
-> once both generic Utility and Object Repo are ready, Framework design is completed
-> This framework will be shared amongst all the automation engineers in the team, 
   and they will start contributing the test script with the help of Framework.
-> Single base class acts as a parent and all the test scripts act as individual childs
   Hence base class follows "heirarchical Inheritance" -> Inheritance real time example.

Explain inheritance with respect to your framework:
-> We use inheritance in Base class which follows heirarchical Inheritance where base class
   contains all the basic configuration annotations will act as a parent class and all the 
   test script should extend from Base class to utilise the functionalities given in 
   base class.

Advantages of BaseClass:
1. Code reusability
2. Test script is optimsed
3. No need to invest time on unwanted actions
4. Test script development is faster
5. Code maintenance and modification is easy
6. Debugging process is easy

TestNG Executions 
 -> Execution:-- Once the test scripts are developed, they have to be executed to check 
                 the correctness of the code - running the program.
 -> Validation:-- Wheather the result is as expected or not

------------------------------------------------------------------------------------------------------------------------------------------
package Generic_Utilities;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.BeforeTest;

import io.github.bonigarcia.wdm.WebDriverManager;
import objectRepository.HomePage;
import objectRepository.VtigerLoginPage;

public class BaseClass {

	public  WebDriver driver;
	public File_Utility flib =new File_Utility() ;
	public WebDriver_utility wlib =new WebDriver_utility() ;
	public Java_Utility jlib= new Java_Utility();
	public Excel_Utility elib = new Excel_Utility();
    public DataBaseUtility dlib=new DataBaseUtility();
	
	@BeforeSuite(groups = {"smokeTest","regressionTest"})
	public void bs() throws Throwable
	{
		dlib.dataBaseConnection(driver);
		System.out.println("DataBase Connection");
	}
	@BeforeTest(groups = {"smokeTest","regressionTest"})
	public void bt()
	{
		System.out.println("parallel execution");
	}
	@BeforeClass(groups = {"smokeTest","regressionTest"})
	public void bc() throws Throwable
	{
	 String BROWSER = flib.getKeyAndValueData("browser");
		 if(BROWSER.equalsIgnoreCase("chrome"))
		 {
			 WebDriverManager.chromedriver().setup();
			  driver=new ChromeDriver();
		 }
		 else if(BROWSER.equalsIgnoreCase("fireFox"))
		 {
			 WebDriverManager.firefoxdriver().setup();
			 driver=new FirefoxDriver();
		 }
		 else
		 {
			 driver=new ChromeDriver();
		 }
		System.out.println("Browser launched");
	}
	@BeforeMethod(groups = {"smokeTest","regressionTest"})
	public void bm() throws Throwable
	{
	     String URL = flib.getKeyAndValueData("url");
		  String USERNAME = flib.getKeyAndValueData("username");
		  String PASSWORD = flib.getKeyAndValueData("password");
				
		  WebDriver_utility wlib = new WebDriver_utility();
		  wlib.maximizeWindow(driver);
		  wlib.waitForElementToLoad(driver);
				
		  driver.get(URL);
		  VtigerLoginPage login = new VtigerLoginPage(driver);
	     login.loginToApp(USERNAME, PASSWORD);
		System.out.println("login to Application");
	}
	@AfterMethod(groups = {"smokeTest","regressionTest"})
	public void am()
	{
		
		HomePage home = new HomePage(driver);
		 home.logOut(driver);
		System.out.println("logout from application");
	}
	@AfterClass(groups = {"smokeTest","regressionTest"})
	public void ac()
	{
		driver.quit();
		System.out.println("close browser");
	}
	@AfterTest(groups = {"smokeTest","regressionTest"})
	public void at()
	{
		System.out.println("parallel execution done");
	}
	@AfterSuite(groups = {"smokeTest","regressionTest"})
	public void as() throws Throwable
	{
		dlib.dataBaseClose();
		System.out.println("close database");
	}
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------
=> Batch Execution: 
-> Executing all the existing test script sequentially/one after another
-> Batch execution is also called as FULL REGRESSION testing.
-> All the test scripts are loaded inside one suite xml file.
-> In one suite xml file / testNg.xml file we can invoke any number of classes 
   but all the classes should be present inside the project.
-> All the class names should be provided as qualified class name
   packageName.Classname
   <class name="vtiger.ContactsTests.CreateContactWithOrgTest"/>
-> Batch execution is preferred to perform full regression testing that is 
   when we cannot identify the impacted areas, or all the areas impacted, Batch 
   Execution is preffered.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
  <test thread-count="5" name="Test">
    <classes>
      <class name="Campaign.CreateCampaignTest"/>
      <class name="Campaign.CreateCampaignWithProductTest"/>
      <class name="Organization.CreateOrganizationTest"/>
      <class name="Product.CreateProductTest"/>
      <class name="Product.CreateProductandDeletePrdTest"/>
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->
----------------------------------------------------------------------------------------------------------------------------------------------------------
=> Group Execution:
-> Executing the similar kind of test script under a group.
   ex: smokeSuite, RegressionSuite
-> All type test script belong either to smoke suite or to Regression suite
-> To achieve group execution, Every @Test should be included in the group
   @Test(groups = "RegressionSuite")
   @Test(groups = {"SmokeSuite","RegressionSuite"})
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
package Generic_Utilities;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.BeforeTest;

import io.github.bonigarcia.wdm.WebDriverManager;
import objectRepository.HomePage;
import objectRepository.VtigerLoginPage;

public class BaseClass {

	public  WebDriver driver;
	public File_Utility flib =new File_Utility() ;
	public WebDriver_utility wlib =new WebDriver_utility() ;
	public Java_Utility jlib= new Java_Utility();
	public Excel_Utility elib = new Excel_Utility();
    public DataBaseUtility dlib=new DataBaseUtility();
	
	@BeforeSuite(groups = {"smokeTest","regressionTest"})
	public void bs() throws Throwable
	{
		dlib.dataBaseConnection(driver);
		System.out.println("DataBase Connection");
	}
	@BeforeTest(groups = {"smokeTest","regressionTest"})
	public void bt()
	{
		System.out.println("parallel execution");
	}
	@BeforeClass(groups = {"smokeTest","regressionTest"})
	public void bc() throws Throwable
	{
	 String BROWSER = flib.getKeyAndValueData("browser");
		 if(BROWSER.equalsIgnoreCase("chrome"))
		 {
			 WebDriverManager.chromedriver().setup();
			  driver=new ChromeDriver();
		 }
		 else if(BROWSER.equalsIgnoreCase("fireFox"))
		 {
			 WebDriverManager.firefoxdriver().setup();
			 driver=new FirefoxDriver();
		 }
		 else
		 {
			 driver=new ChromeDriver();
		 }
		System.out.println("Browser launched");
	}
	@BeforeMethod(groups = {"smokeTest","regressionTest"})
	public void bm() throws Throwable
	{
	     String URL = flib.getKeyAndValueData("url");
		  String USERNAME = flib.getKeyAndValueData("username");
		  String PASSWORD = flib.getKeyAndValueData("password");
				
		  WebDriver_utility wlib = new WebDriver_utility();
		  wlib.maximizeWindow(driver);
		  wlib.waitForElementToLoad(driver);
				
		  driver.get(URL);
		  VtigerLoginPage login = new VtigerLoginPage(driver);
	     login.loginToApp(USERNAME, PASSWORD);
		System.out.println("login to Application");
	}
	@AfterMethod(groups = {"smokeTest","regressionTest"})
	public void am()
	{
		
		HomePage home = new HomePage(driver);
		 home.logOut(driver);
		System.out.println("logout from application");
	}
	@AfterClass(groups = {"smokeTest","regressionTest"})
	public void ac()
	{
		driver.quit();
		System.out.println("close browser");
	}
	@AfterTest(groups = {"smokeTest","regressionTest"})
	public void at()
	{
		System.out.println("parallel execution done");
	}
	@AfterSuite(groups = {"smokeTest","regressionTest"})
	public void as() throws Throwable
	{
		dlib.dataBaseClose();
		System.out.println("close database");
	}
}
--------------------------------------------------------------------------------------------------------------------------------------------------

Regional Regression Test:
To execute particular test cases across the Suite is called regional regression testing
in Real time , impact area is given by developer / test lead , based on that idea XML will be created  
 Whenever we want execute particular @test method inside class , we go for <method> & <include>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
<groups>
<run>
<include name="regressionTest"/>
</run>
</groups>
  <test thread-count="5" name="Test">
    <classes>
      <class name="Campaign.CreateCampaignTest"/>
      <class name="Organization.CreateOrganizationTest"/>
      <class name="Campaign.CreateCampaignWithProductTest"/>
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->
--------------------------------------------------------------------------------------------------------------------------------------------------

Parallel Execution: 
 Types of Parallel Execution 
1.	Distributed Parallel execution:
2.	Cross browser parallel execution 

1.	Distributed Parallel execution:
Distribute the test case across the multiple test runner & execute, each <test> Test runner in parallel is called Distributed Parallel execution
	we reduce the suite execution time, so that we can get the result early
	in order the archive parallel execution we should enable parallel=”tests” & thread-count=5 in <suite> , then create multiple test runner & distribute the testcase
	maximum thread count is 5 
	Thread count should be same as number of <test> testRunner
 
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite parallel="tests" name="Suite">
  <test thread-count="5" parallel="tests" name="TestRunner1">
    <classes>
      <class name="Product.CreateProductTest"/>
      </classes>
      </test>
      
      <test name="TestRunner2">
      <classes>
      <class name="Campaign.CreateCampaignTest"/>
      <class name="Organization.CreateOrganizationTest"/>
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

2	Cross browser parallel execution / Browser Compatibility testing 
 

1.	Execute same set of testcase in different Browser parallel is called cross browser testing
2.	To achieve cross browser testing we should we <parameter> in XML file & @parameters annotation inside the testScript
 
3.	<parameter > is used to specify the browser data for each <test> 

EG : 
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite" parallel= "tests" thread-count="2">
  <test name="Test-Runner-Chrome">
   <parameter name="BROWSER" value="chrome"/> 
    <classes>
       <class name="com.vtiger.comcast.organizationtest.CreateOrganization"/>
      <class name="com.vtiger.comcast.organizationtest.SearchOrgTest"/>

    </classes>
  </test> <!-- Test -->
  
  <test name="Test-Runner-Firefox">
  <parameter name="BROWSER" value="firefox"/> 
    <classes>
    <class name="com.vtiger.comcast.organizationtest.CreateOrganization"/>
      <class name="com.vtiger.comcast.organizationtest.SearchOrgTest"/>
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->

4.	@parameters annotation will be used to receive the data (Eg : browser , platform etc) from the XML file to test Scripts [Like BaseClass]
Note : Replace below annotation inside the balseclass
@Parameters("BROWSER")
		

package Generic_Utilities;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.events.WebDriverListener;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;

import io.github.bonigarcia.wdm.WebDriverManager;
import objectRepository.HomePage;
import objectRepository.VtigerLoginPage;

public class BaseClass {

	public static WebDriver sDriver;
	public WebDriver driver;
	public File_Utility flib = new File_Utility();
	public WebDriver_utility wlib = new WebDriver_utility();
	public Java_Utility jlib = new Java_Utility();
	public Excel_Utility elib = new Excel_Utility();
	public DataBaseUtility dlib = new DataBaseUtility();

	@BeforeSuite(groups = { "smokeTest", "regressionTest" })
	public void bs() throws Throwable {
		dlib.dataBaseConnection(driver);
		System.out.println("DataBase Connection");
	}

	@BeforeTest(groups = { "smokeTest", "regressionTest" })
	public void bt() {
		System.out.println("parallel execution");
	}

	// @Parameters("BROWSER")
	@BeforeClass(groups = { "smokeTest", "regressionTest" })
	public void bc() throws Throwable {
		String BROWSER = flib.getKeyAndValueData("browser");
		if (BROWSER.equalsIgnoreCase("chrome")) {
			WebDriverManager.chromedriver().setup();
			driver = new ChromeDriver();
		} else if (BROWSER.equalsIgnoreCase("edge")) {
			WebDriverManager.edgedriver().setup();
			driver = new EdgeDriver();
		} else if (BROWSER.equalsIgnoreCase("firefox")) {
			WebDriverManager.firefoxdriver().setup();
			driver = new FirefoxDriver();
		} else {
			driver = new ChromeDriver();
		}
		System.out.println("Browser launched");
		sDriver = driver;
	}

	@BeforeMethod(groups = { "smokeTest", "regressionTest" })
	public void bm() throws Throwable {
		String URL = flib.getKeyAndValueData("url");
		String USERNAME = flib.getKeyAndValueData("username");
		String PASSWORD = flib.getKeyAndValueData("password");

		wlib.maximizeWindow(driver);
		wlib.waitForElementToLoad(driver);

		driver.get(URL);
		VtigerLoginPage login = new VtigerLoginPage(driver);
		login.loginToApp(USERNAME, PASSWORD);
		System.out.println("login to Application");
	}

	@AfterMethod(groups = { "smokeTest", "regressionTest" })
	public void am() {

		HomePage home = new HomePage(driver);
		home.logOut(driver);
		System.out.println("logout from application");
	}

	@AfterClass(groups = { "smokeTest", "regressionTest" })
	public void ac() {
		driver.quit();
		System.out.println("close browser");
	}

	@AfterTest(groups = { "smokeTest", "regressionTest" })
	public void at() {
		System.out.println("parallel execution done");
	}

	@AfterSuite(groups = { "smokeTest", "regressionTest" })
	public void as() throws Throwable {
		dlib.dataBaseClose();
		System.out.println("close database");
	}
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Assertion / CheckPoint
	Assertion is a feature available in TestNG used to validate test scripts expected results
	As per the Rule of the automation every expected result should be verified with Assert statements, because java “if else “statement will not have capability to fail the testNG test
Scripts
	There are 2 types of Assertions in TESTNG 
 
Hard Assertion	Soft Assertion
*All methods are static in nature	                      *  All methods are non-static in nature
It does not allow further execution of test                   *  Next steps would be executed even if the line containing soft assertion gets failed.  
if the line containing hard assert gets failed.	

*Whole test case gets failed if at least 1 hard assert fails.	*AssertAll() extra  lines of code are required to track the fail status. 
*To verify mandatory fields we go for hard assert	      * To verify non mandatory fields we go for soft assert


HardAssert 
Whenever hardAssert method fails, testNG generate AssertError exception & stop the current test execution & continue execution with remaining test

package testNg;

import org.testng.Assert;
import org.testng.annotations.Test;

public class HardAssertEX {

	@Test
	public void m1()
	{
		System.out.println("Step1");
		System.out.println("Step2");
	//	Assert.assertEquals(false, true);
		System.out.println("Step3");
		System.out.println("Step4");
	}
	
	@Test
	public void m2()
	{
		String expData = "Shobha";
		String actData = "Shobha";
		Assert.assertEquals(actData, expData);
		
	}
	
}
----------------------------------------------------------------------------------------------------------------------------------------------------
Soft Assert
Whenever softAssert mtd fails , testNG Generate AssertError exception & continue execution with remaining steps of same testScript 

package testNg;

import org.testng.annotations.Test;
@Test

public class SampleTest {

	public void createProduct()
	{
	System.out.println("product created");	
	}

	
	public void modifyProduct()
	{
		System.out.println("product modified");
	}
	

	public void deleteProduct()
	{
		System.out.println("product deleted");
	}
}
------------------------------------------------------------------------------------------------------------------------------------------------------
Advantages of Assertion:
	 It’s used to fail the TESTNG test scripts
	It’s used for test scripts validation
	It’s generate “AssertErrorException” & reason of the failure + failed line number whenever test is failed  
	We can compare any 2 primitive variable or array or Collection or MAP in single line 
-----------------------------------------------------------------------------------------------------------------------------------------------------

Listener :

package Generic_Utilities;

import java.io.File;
import java.io.IOException;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.Iterator;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.Select;

public class WebDriver_utility {

	/**
	 * this method is used for maximizing window
	 * @param driver
	 * @author Shobha
	 */
	public void maximizeWindow(WebDriver driver)
	{
		driver.manage().window().maximize();
	}
	
	/**
	 * this method is used to wait all elements to get loaded in GUI
	 * version3
	 * @param driver
	 */
	public void waitForElementToLoad(WebDriver driver)
	{
	driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);	
	}
	
	/**
	 * this method is used to wait all elements to get loaded in GUI
	 * version4
	 * @param driver
	 */
	public void elementsToGetLoaded(WebDriver driver)
	{
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
	}
	/**
	 * this method is used to switch windows
	 * @param driver
	 * @param particalText
	 */
	public  void switchingWindows(WebDriver driver,String particalText)
	{
		 Set<String> wins = driver.getWindowHandles();
	      Iterator<String> it = wins.iterator();
	         while(it.hasNext())
	       {
	    	   String win = it.next();
	    	   driver.switchTo().window(win);
	    	   String currentTitle = driver.getTitle();
	    	   if(currentTitle.contains(particalText))
	    	   {
	    		   break;
	    	   }
	       }
	}
	/**
	 * this method is used to accept the alert popup
	 * @param driver
	 */
	public void alertAccept(WebDriver driver)
	{
		driver.switchTo().alert().accept();
	}
	
	/** this method is used to dismiss the alert popup
	 * 
	 * @param driver
	 */
	public void alertDismiss(WebDriver driver)
	{
		driver.switchTo().alert().dismiss();
	}
	
	/**
	 * this method is used to handle drop down using Select class(SelectByIndex)
	 * @param ele
	 * @param value
	 */
	public void selectByIndexApproch(WebElement ele, int value)
	{
		Select select = new Select(ele);
		select.selectByIndex(value);
	}
	
	/**
	 * this method is used to handle drop down using Select class(SelectByValue)
	 * @param ele
	 * @param value
	 */
	public void selectByValueApproch(WebElement ele, String value)
	{
		Select select = new Select(ele);
		select.selectByValue(value);
	}
	
	/**
	 * this method is used to handle drop down using Select class(SelectByValue)
	 * @param ele
	 * @param value
	 */
	public void selectByVisibleTextApproch(WebElement ele, String text)
	{
		Select select = new Select(ele);
		select.selectByVisibleText(text);
	}
	/**
	 * This method is used to move the cursor to a particular element
	 * @param driver
	 * @param ele
	 */
	public void moveToElement(WebDriver driver,WebElement ele)
	{
		Actions act = new Actions(driver);
		act.moveToElement(ele).perform();
	}
	public static void takeScreenShot(WebDriver driver) throws Throwable
	{
//		TakesScreenshot takesSceenShot = (TakesScreenshot) driver;
//		File src = takesSceenShot.getScreenshotAs(OutputType.FILE);
//		File dst = new File("./ScreenShots/" + screenShotName +".png");
//		FileUtils.copyFile(src, dst);
//		return dst.getAbsolutePath();
		TakesScreenshot takesSceenShot = (TakesScreenshot) driver;
		File src = takesSceenShot.getScreenshotAs(OutputType.FILE);
		LocalDateTime dateTime = LocalDateTime.now();
		String currentDateTime = dateTime.toString().replace(":", "_").replace(" ", "_");
		File dst = new File("./ScreenShots/" +"screenShotName"+currentDateTime+".png");
		try {
			FileUtils.copyFile(src, dst);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//return screenShotName;
		
	}
	
	public static String takeScreenShot(WebDriver driver, String screenShotName) throws Throwable {
		
		TakesScreenshot takesSceenShot = (TakesScreenshot) driver;
		File src = takesSceenShot.getScreenshotAs(OutputType.FILE);
		File dst = new File("./ScreenShots/" + screenShotName +".png");
		FileUtils.copyFile(src, dst);
		return dst.getAbsolutePath();
}
}
------------------------------------------------------------------------------------------------------------------------------------------------
Extends Reports
***************
<!-- https://mvnrepository.com/artifact/com.aventstack/extentreports -->
<dependency>
    <groupId>com.aventstack</groupId>
    <artifactId>extentreports</artifactId>
    <version>5.0.9</version>
</dependency>
--------------------------------------------------------------------------------------------------------------------------------------------------

 package Generic_Utilities;

import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;

public class ListenerImplementation implements ITestListener 
{

	 ExtentReports report;
	 ExtentTest test;
	
    public void onTestStart(ITestResult result) {
		test=report.createTest(result.getName());
		
	}

	public void onTestSuccess(ITestResult result)
	{
	test.log(Status.PASS, result.getMethod().getMethodName());
	test.log(Status.PASS, result.getThrowable());
		
	}

	public void onTestFailure(ITestResult result){
		
        test.log(Status.FAIL, result.getMethod().getMethodName());
		test.log(Status.FAIL, result.getThrowable());
		
		System.out.println("<--------I am Listening----------->");
		 
		String screenShot=null;
		
			try {
screenShot = WebDriver_utility.takeScreenShot(BaseClass.sDriver, result.getMethod().getMethodName());
			} catch (Throwable e) {
				
				e.printStackTrace();
			}
	
		test.addScreenCaptureFromPath(screenShot);
	
	}

	public void onTestSkipped(ITestResult result)
	{
		test.log(Status.SKIP,result.getMethod().getMethodName());
		test.log(Status.SKIP, result.getThrowable());
	}

	public void onStart(ITestContext context) {
		
		Java_Utility jlib = new Java_Utility();
		int ranNum = jlib.getRandomNumber();
		
ExtentSparkReporter spark = new ExtentSparkReporter("ExtentReport/Report.html"+ranNum);
spark.config().setTheme(Theme.STANDARD);
spark.config().setDocumentTitle("Testing");
spark.config().setReportName("Shobha");

//system configuration
report=new ExtentReports();
	
report.attachReporter(spark);
report.setSystemInfo("platform", "windows10");
report.setSystemInfo("executed by", "shobha");
report.setSystemInfo("reviewed by", "rathin");
}
public void onFinish(ITestContext context) {
		report.flush();
	}
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------

RetryAnalyzer:

	This feature of TestNG helps the user to rerun the test script when ever test is getting failed 
	In order to use this feature we have to implements RetryAnalyzer interface & override retry method
	Inside the retry method, we should specify the upper limit so that test script will get executed specified limit when test is getting failed.

package Organization;

import java.io.FileInputStream;
import java.time.Duration;
import java.util.Properties;
import java.util.Random;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.Assert;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;

import Generic_Utilities.BaseClass;
import Generic_Utilities.Excel_Utility;
import Generic_Utilities.File_Utility;
import Generic_Utilities.Java_Utility;
import Generic_Utilities.WebDriver_utility;
import objectRepository.CreateOrganizationPage;
import objectRepository.CreateProductPage;
import objectRepository.HomePage;
import objectRepository.VtigerLoginPage;
@Listeners(Generic_Utilities.ListenerImplementation.class)
public class CreateOrganizationTest extends BaseClass{

	@Test//(groups = {"smokeTest","regressionTest"})
	//@Test(retryAnalyzer = Generic_Utilities.RetryImplementation.class)
	public void createOrganizationTest() throws Throwable {
  HomePage home = new HomePage(driver);
  home.clickOrganizationLink();
 
 CreateOrganizationPage orgPage = new CreateOrganizationPage(driver);
  orgPage.clickOrgPlusSign();
 // Assert.assertEquals(false, true);
  int ranNum = jlib.getRandomNumber();
  String organizationData = elib.readExcelDataUsingDataFormatter("Organization", 0, 0)+ranNum;
  String phoneNum = elib.readExcelDataUsingDataFormatter("Organization", 2, 1);
  String emailId = elib.readExcelDataUsingDataFormatter("Organization", 3, 1); 
  orgPage.orgData(organizationData, phoneNum, emailId);
//  Assert.fail();
 orgPage.clickOnSaveButton();
  Thread.sleep(2000);
}
}
---------------------------------------------------------------------------------------------------------------------------------------------------------







